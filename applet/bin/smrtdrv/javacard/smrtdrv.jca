// converted by version 1.3
// on Tue Aug 18 10:55:44 ICT 2020

.package smrtdrv {
	.aid 0x0:0x11:0x22:0x33:0x44;
	.version 1.0;

	.imports {
		0xA0:0x0:0x0:0x0:0x62:0x1:0x1 1.3;		//javacard/framework
		0xA0:0x0:0x0:0x0:0x62:0x0:0x1 1.0;		//java/lang
	}

	.applet {
		0x0:0x11:0x22:0x33:0x44:0x0 LicenseApplet;
	}

	.constantPool {
		// 0
		instanceFieldRef boolean LicenseApplet/isValid;
		// 1
		instanceFieldRef byte[] LicenseApplet/recentFaults;
		// 2
		staticMethodRef 0.3.0()V;		// javacard/framework/Applet.<init>()V
		// 3
		classRef LicenseApplet;
		// 4
		staticMethodRef LicenseApplet/<init>()V;
		// 5
		virtualMethodRef 0.3.2([BSB)V;		// register([BSB)V
		// 6
		staticFieldRef byte LicenseApplet/cardType;
		// 7
		staticFieldRef byte[] LicenseApplet/cardId;
		// 8
		staticFieldRef byte[] LicenseApplet/fullName;
		// 9
		staticFieldRef byte[] LicenseApplet/birthDate;
		// 10
		staticFieldRef byte[] LicenseApplet/hometown;
		// 11
		staticFieldRef byte[] LicenseApplet/grantedDate;
		// 12
		staticFieldRef byte[] LicenseApplet/expireDate;
		// 13
		staticFieldRef byte[] LicenseApplet/avatarImage;
		// 14
		staticMethodRef 0.16.1([BS[BSS)S;		// javacard/framework/Util.arrayCopy([BS[BSS)S
		// 15
		staticFieldRef short LicenseApplet/cardIdLen;
		// 16
		staticFieldRef short LicenseApplet/fullNameLen;
		// 17
		staticFieldRef short LicenseApplet/birthDateLen;
		// 18
		staticFieldRef short LicenseApplet/hometownLen;
		// 19
		staticFieldRef short LicenseApplet/grantedDateLen;
		// 20
		staticFieldRef short LicenseApplet/expireDateLen;
		// 21
		virtualMethodRef 0.3.3()Z;		// selectingApplet()Z
		// 22
		virtualMethodRef 0.10.1()[B;		// getBuffer()[B
		// 23
		virtualMethodRef 0.10.6()S;		// setIncomingAndReceive()S
		// 24
		staticMethodRef LicenseApplet/readBasicInfo(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 25
		staticMethodRef LicenseApplet/readRecentFault(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 26
		staticMethodRef LicenseApplet/readAvatarImage(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 27
		staticMethodRef LicenseApplet/writeAllBasicInfo(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 28
		staticMethodRef LicenseApplet/rewriteCardId(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 29
		staticMethodRef LicenseApplet/rewriteCardType(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 30
		staticMethodRef LicenseApplet/rewriteFullName(Ljavacard/framework/APDU;S)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 31
		staticMethodRef LicenseApplet/rewriteBirthDate(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 32
		staticMethodRef LicenseApplet/rewriteHometown(Ljavacard/framework/APDU;S)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 33
		staticMethodRef LicenseApplet/rewriteGrantedDate(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 34
		staticMethodRef LicenseApplet/rewriteExpireDate(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 35
		staticMethodRef LicenseApplet/rewriteAvatarImage(Ljavacard/framework/APDU;S)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 36
		staticMethodRef LicenseApplet/writeNewFault(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 37
		staticMethodRef LicenseApplet/clearRecentFault()V;
		// 38
		staticMethodRef 0.7.1(S)V;		// javacard/framework/ISOException.throwIt(S)V
		// 39
		virtualMethodRef 0.10.7()S;		// setOutgoing()S
		// 40
		virtualMethodRef 0.10.9(S)V;		// setOutgoingLength(S)V
		// 41
		virtualMethodRef 0.10.5([BSS)V;		// sendBytesLong([BSS)V
		// 42
		virtualMethodRef 0.10.4(SS)V;		// sendBytes(SS)V
		// 43
		staticFieldRef short LicenseApplet/avatarImageLen;
		// 44
		staticMethodRef 0.8.1()V;		// javacard/framework/JCSystem.beginTransaction()V
		// 45
		staticMethodRef 0.8.2()V;		// javacard/framework/JCSystem.commitTransaction()V
		// 46
		staticMethodRef 0.16.3([BSSB)S;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
	}

	.class public LicenseApplet 0 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			private byte[] recentFaults 0;		// [B
			private boolean isValid 1;		// Z
			static final byte INS_READ_BASIC_INFO = 0;		// B
			static final byte INS_READ_FAULT_INFO = 1;		// B
			static final byte INS_READ_AVATAR_IMAGE = 2;		// B
			static final byte INS_WRITE_ALL_BASIC_INFO = 16;		// B
			static final byte INS_REWRITE_CARD_ID = 17;		// B
			static final byte INS_REWRITE_FULLNAME = 18;		// B
			static final byte INS_REWRITE_BIRTH_DATE = 19;		// B
			static final byte INS_REWRITE_HOMETOWN = 20;		// B
			static final byte INS_REWRITE_GRANTED_DATE = 21;		// B
			static final byte INS_REWRITE_EXPIRE_DATE = 22;		// B
			static final byte INS_REWRITE_CARD_TYPE = 23;		// B
			static final byte INS_REWRITE_AVATAR_IMAGE = 24;		// B
			static final byte INS_WRITE_NEW_FAULT = 25;		// B
			static final byte INS_CLEAR_RECENT_FAULT = 32;		// B
			static final short CARD_ID_LENGTH = 8;		// S
			static final short DATE_FORMAT_LENGTH = 4;		// S
			static final byte EMPTY_VALUE = 0;		// B
			static final int MAX_IMAGE_SIZE = 8192;		// I
			static final byte CARD_TYPE_A1 = 1;		// B
			static final byte CARD_TYPE_A2 = 2;		// B
			static final byte CARD_TYPE_A3 = 3;		// B
			static final byte CARD_TYPE_A4 = 4;		// B
			static final byte CARD_TYPE_B1 = 17;		// B
			static final byte CARD_TYPE_B2 = 18;		// B
			static final byte CARD_TYPE_C = 33;		// B
			static final byte CARD_TYPE_D = 49;		// B
			static final byte CARD_TYPE_E = 65;		// B
			static final byte CARD_TYPE_F = 81;		// B
			static final byte CARD_TYPE_FB2 = 82;		// B
			static final byte CARD_TYPE_FC = 83;		// B
			static final byte CARD_TYPE_FD = 84;		// B
			static final byte CARD_TYPE_FE = 85;		// B
			private static byte cardType;		// B
			private static byte[] cardId;		// [B
			private static byte[] fullName;		// [B
			private static byte[] birthDate;		// [B
			private static byte[] hometown;		// [B
			private static byte[] grantedDate;		// [B
			private static byte[] expireDate;		// [B
			private static byte[] avatarImage;		// [B
			private static short cardIdLen;		// S
			private static short fullNameLen;		// S
			private static short birthDateLen;		// S
			private static short hometownLen;		// S
			private static short grantedDateLen;		// S
			private static short expireDateLen;		// S
			private static short avatarImageLen;		// S
			static final byte MISSING_EQUIPMENT_FAULT = 1;		// B
			static final byte LIGHT_SIGNAL_FAULT = 2;		// B
			static final byte OVER_WEIGHT_FAULT = 3;		// B
			static final byte WRONG_LANE_FAULT = 4;		// B
		}

		.publicMethodTable 7 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
		}

		.packageMethodTable 0 {
		}

		.method public <init>()V 0 {
			.stack 5;
			.locals 0;

				L0:	aload_0;
					invokespecial 2;		// javacard/framework/Applet.<init>()V
					aload_0;
					sconst_1;
					putfield_b 0;		// boolean smrtdrv/LicenseApplet.isValid
					aload_0;
					bspush 25;
					newarray 11;
					dup;
					sconst_0;
					sconst_0;
					bastore;
					dup;
					sconst_1;
					sconst_0;
					bastore;
					dup;
					sconst_2;
					sconst_0;
					bastore;
					dup;
					sconst_3;
					sconst_0;
					bastore;
					dup;
					sconst_4;
					sconst_0;
					bastore;
					dup;
					sconst_5;
					sconst_0;
					bastore;
					dup;
					bspush 6;
					sconst_0;
					bastore;
					dup;
					bspush 7;
					sconst_0;
					bastore;
					dup;
					bspush 8;
					sconst_0;
					bastore;
					dup;
					bspush 9;
					sconst_0;
					bastore;
					dup;
					bspush 10;
					sconst_0;
					bastore;
					dup;
					bspush 11;
					sconst_0;
					bastore;
					dup;
					bspush 12;
					sconst_0;
					bastore;
					dup;
					bspush 13;
					sconst_0;
					bastore;
					dup;
					bspush 14;
					sconst_0;
					bastore;
					dup;
					bspush 15;
					sconst_0;
					bastore;
					dup;
					bspush 16;
					sconst_0;
					bastore;
					dup;
					bspush 17;
					sconst_0;
					bastore;
					dup;
					bspush 18;
					sconst_0;
					bastore;
					dup;
					bspush 19;
					sconst_0;
					bastore;
					dup;
					bspush 20;
					sconst_0;
					bastore;
					dup;
					bspush 21;
					sconst_0;
					bastore;
					dup;
					bspush 22;
					sconst_0;
					bastore;
					dup;
					bspush 23;
					sconst_0;
					bastore;
					dup;
					bspush 24;
					sconst_0;
					bastore;
					putfield_a 1;		// reference smrtdrv/LicenseApplet.recentFaults
					return;
		}

		.method public static install([BSB)V 1 {
			.stack 5;
			.locals 6;

				L0:	new 3;		// smrtdrv/LicenseApplet
					dup;
					invokespecial 4;		// smrtdrv/LicenseApplet.<init>()V
					aload_0;
					sload_1;
					sconst_1;
					sadd;
					aload_0;
					sload_1;
					baload;
					invokevirtual 5;		// register([BSB)V
					sconst_1;
					putstatic_b 6;		// byte smrtdrv/LicenseApplet.cardType
					bspush 8;
					newarray 11;
					putstatic_a 7;		// reference smrtdrv/LicenseApplet.cardId
					bspush 64;
					newarray 11;
					putstatic_a 8;		// reference smrtdrv/LicenseApplet.fullName
					sconst_4;
					newarray 11;
					putstatic_a 9;		// reference smrtdrv/LicenseApplet.birthDate
					bspush 64;
					newarray 11;
					putstatic_a 10;		// reference smrtdrv/LicenseApplet.hometown
					sconst_4;
					newarray 11;
					putstatic_a 11;		// reference smrtdrv/LicenseApplet.grantedDate
					sconst_4;
					newarray 11;
					putstatic_a 12;		// reference smrtdrv/LicenseApplet.expireDate
					sspush 8192;
					newarray 11;
					putstatic_a 13;		// reference smrtdrv/LicenseApplet.avatarImage
					bspush 8;
					newarray 11;
					dup;
					sconst_0;
					sconst_0;
					bastore;
					dup;
					sconst_1;
					sconst_1;
					bastore;
					dup;
					sconst_2;
					sconst_2;
					bastore;
					dup;
					sconst_3;
					sconst_3;
					bastore;
					dup;
					sconst_4;
					sconst_4;
					bastore;
					dup;
					sconst_5;
					sconst_5;
					bastore;
					dup;
					bspush 6;
					bspush 6;
					bastore;
					dup;
					bspush 7;
					bspush 7;
					bastore;
					astore_3;
				L1:	bspush 16;
					newarray 11;
					dup;
					sconst_0;
					bspush 78;
					bastore;
					dup;
					sconst_1;
					bspush 71;
					bastore;
					dup;
					sconst_2;
					bspush 85;
					bastore;
					dup;
					sconst_3;
					bspush 89;
					bastore;
					dup;
					sconst_4;
					bspush 69;
					bastore;
					dup;
					sconst_5;
					bspush 78;
					bastore;
					dup;
					bspush 6;
					bspush 32;
					bastore;
					dup;
					bspush 7;
					bspush 84;
					bastore;
					dup;
					bspush 8;
					bspush 73;
					bastore;
					dup;
					bspush 9;
					bspush 69;
					bastore;
					dup;
					bspush 10;
					bspush 78;
					bastore;
					dup;
					bspush 11;
					bspush 32;
					bastore;
					dup;
					bspush 12;
					bspush 68;
					bastore;
					dup;
					bspush 13;
					bspush 85;
					bastore;
					dup;
					bspush 14;
					bspush 78;
					bastore;
					dup;
					bspush 15;
					bspush 71;
					bastore;
					astore 4;
				L2:	bspush 20;
					newarray 11;
					dup;
					sconst_0;
					bspush 49;
					bastore;
					dup;
					sconst_1;
					bspush 50;
					bastore;
					dup;
					sconst_2;
					bspush 49;
					bastore;
					dup;
					sconst_3;
					bspush 32;
					bastore;
					dup;
					sconst_4;
					bspush 84;
					bastore;
					dup;
					sconst_5;
					bspush 82;
					bastore;
					dup;
					bspush 6;
					bspush 65;
					bastore;
					dup;
					bspush 7;
					bspush 78;
					bastore;
					dup;
					bspush 8;
					bspush 32;
					bastore;
					dup;
					bspush 9;
					bspush 80;
					bastore;
					dup;
					bspush 10;
					bspush 72;
					bastore;
					dup;
					bspush 11;
					bspush 85;
					bastore;
					dup;
					bspush 12;
					bspush 32;
					bastore;
					dup;
					bspush 13;
					bspush 72;
					bastore;
					dup;
					bspush 14;
					bspush 65;
					bastore;
					dup;
					bspush 15;
					bspush 32;
					bastore;
					dup;
					bspush 16;
					bspush 68;
					bastore;
					dup;
					bspush 17;
					bspush 79;
					bastore;
					dup;
					bspush 18;
					bspush 78;
					bastore;
					dup;
					bspush 19;
					bspush 71;
					bastore;
					astore 5;
				L3:	sconst_4;
					newarray 11;
					dup;
					sconst_0;
					sconst_1;
					bastore;
					dup;
					sconst_1;
					bspush 6;
					bastore;
					dup;
					sconst_2;
					bspush 20;
					bastore;
					dup;
					sconst_3;
					bspush 20;
					bastore;
					astore 6;
				L4:	sconst_4;
					newarray 11;
					dup;
					sconst_0;
					sconst_1;
					bastore;
					dup;
					sconst_1;
					bspush 10;
					bastore;
					dup;
					sconst_2;
					bspush 20;
					bastore;
					dup;
					sconst_3;
					bspush 20;
					bastore;
					astore 7;
				L5:	sconst_4;
					newarray 11;
					dup;
					sconst_0;
					sconst_1;
					bastore;
					dup;
					sconst_1;
					bspush 12;
					bastore;
					dup;
					sconst_2;
					bspush 20;
					bastore;
					dup;
					sconst_3;
					bspush 20;
					bastore;
					astore 8;
				L6:	aload_3;
					sconst_0;
					getstatic_a 7;		// reference smrtdrv/LicenseApplet.cardId
					sconst_0;
					aload_3;
					arraylength;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload 4;
					sconst_0;
					getstatic_a 8;		// reference smrtdrv/LicenseApplet.fullName
					sconst_0;
					aload 4;
					arraylength;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload 6;
					sconst_0;
					getstatic_a 9;		// reference smrtdrv/LicenseApplet.birthDate
					sconst_0;
					aload 6;
					arraylength;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload 5;
					sconst_0;
					getstatic_a 10;		// reference smrtdrv/LicenseApplet.hometown
					sconst_0;
					aload 5;
					arraylength;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload 7;
					sconst_0;
					getstatic_a 11;		// reference smrtdrv/LicenseApplet.grantedDate
					sconst_0;
					aload 7;
					arraylength;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload 8;
					sconst_0;
					getstatic_a 12;		// reference smrtdrv/LicenseApplet.expireDate
					sconst_0;
					aload 8;
					arraylength;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload_3;
					arraylength;
					putstatic_s 15;		// short smrtdrv/LicenseApplet.cardIdLen
					aload 4;
					arraylength;
					putstatic_s 16;		// short smrtdrv/LicenseApplet.fullNameLen
					aload 6;
					arraylength;
					putstatic_s 17;		// short smrtdrv/LicenseApplet.birthDateLen
					aload 5;
					arraylength;
					putstatic_s 18;		// short smrtdrv/LicenseApplet.hometownLen
					aload 7;
					arraylength;
					putstatic_s 19;		// short smrtdrv/LicenseApplet.grantedDateLen
					aload 8;
					arraylength;
					putstatic_s 20;		// short smrtdrv/LicenseApplet.expireDateLen
					return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 3;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_0;
					invokevirtual 21;		// selectingApplet()Z
					ifeq L2;
				L1:	return;
				L2:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L3:	aload_1;
					invokevirtual 23;		// setIncomingAndReceive()S
					sstore_3;
				L4:	aload_2;
					sconst_1;
					baload;
					stableswitch L19 0 32 L5 L6 L7 L19 L19 L19 L19 L19 L19 L19 L19 L19 L19 L19 L19 L19 L8 L9 L11 L12 L13 L14 L15 L10 L16 L17 L19 L19 L19 L19 L19 L19 L18;
				L5:	aload_0;
					aload_1;
					invokespecial 24;		// smrtdrv/LicenseApplet.readBasicInfo(Ljavacard/framework/APDU;)V
					goto L20;
				L6:	aload_0;
					aload_1;
					invokespecial 25;		// smrtdrv/LicenseApplet.readRecentFault(Ljavacard/framework/APDU;)V
					goto L20;
				L7:	aload_0;
					aload_1;
					invokespecial 26;		// smrtdrv/LicenseApplet.readAvatarImage(Ljavacard/framework/APDU;)V
					goto L20;
				L8:	aload_0;
					aload_1;
					invokespecial 27;		// smrtdrv/LicenseApplet.writeAllBasicInfo(Ljavacard/framework/APDU;)V
					goto L20;
				L9:	aload_0;
					aload_1;
					invokespecial 28;		// smrtdrv/LicenseApplet.rewriteCardId(Ljavacard/framework/APDU;)V
					goto L20;
				L10:	aload_0;
					aload_1;
					invokespecial 29;		// smrtdrv/LicenseApplet.rewriteCardType(Ljavacard/framework/APDU;)V
					goto L20;
				L11:	aload_0;
					aload_1;
					sload_3;
					invokespecial 30;		// smrtdrv/LicenseApplet.rewriteFullName(Ljavacard/framework/APDU;S)V
					goto L20;
				L12:	aload_0;
					aload_1;
					invokespecial 31;		// smrtdrv/LicenseApplet.rewriteBirthDate(Ljavacard/framework/APDU;)V
					goto L20;
				L13:	aload_0;
					aload_1;
					sload_3;
					invokespecial 32;		// smrtdrv/LicenseApplet.rewriteHometown(Ljavacard/framework/APDU;S)V
					goto L20;
				L14:	aload_0;
					aload_1;
					invokespecial 33;		// smrtdrv/LicenseApplet.rewriteGrantedDate(Ljavacard/framework/APDU;)V
					goto L20;
				L15:	aload_0;
					aload_1;
					invokespecial 34;		// smrtdrv/LicenseApplet.rewriteExpireDate(Ljavacard/framework/APDU;)V
					goto L20;
				L16:	aload_0;
					aload_1;
					sload_3;
					invokespecial 35;		// smrtdrv/LicenseApplet.rewriteAvatarImage(Ljavacard/framework/APDU;S)V
					goto L20;
				L17:	aload_0;
					aload_1;
					invokespecial 36;		// smrtdrv/LicenseApplet.writeNewFault(Ljavacard/framework/APDU;)V
					goto L20;
				L18:	aload_0;
					invokespecial 37;		// smrtdrv/LicenseApplet.clearRecentFault()V
					goto L20;
				L19:	sspush 27904;
					invokestatic 38;		// javacard/framework/ISOException.throwIt(S)V
				L20:	return;
		}

		.method private readBasicInfo(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	sconst_2;
					getstatic_s 15;		// short smrtdrv/LicenseApplet.cardIdLen
					sadd;
					getstatic_s 16;		// short smrtdrv/LicenseApplet.fullNameLen
					sadd;
					getstatic_s 18;		// short smrtdrv/LicenseApplet.hometownLen
					sadd;
					getstatic_s 17;		// short smrtdrv/LicenseApplet.birthDateLen
					sadd;
					getstatic_s 19;		// short smrtdrv/LicenseApplet.grantedDateLen
					sadd;
					getstatic_s 20;		// short smrtdrv/LicenseApplet.expireDateLen
					sadd;
					sconst_1;
					sadd;
					sstore_3;
				L2:	aload_1;
					invokevirtual 39;		// setOutgoing()S
					pop;
					aload_1;
					sload_3;
					invokevirtual 40;		// setOutgoingLength(S)V
					aload_1;
					getstatic_a 7;		// reference smrtdrv/LicenseApplet.cardId
					sconst_0;
					getstatic_s 15;		// short smrtdrv/LicenseApplet.cardIdLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					aload_2;
					sconst_0;
					getstatic_s 16;		// short smrtdrv/LicenseApplet.fullNameLen
					s2b;
					bastore;
					aload_1;
					sconst_0;
					sconst_1;
					invokevirtual 42;		// sendBytes(SS)V
					aload_1;
					getstatic_a 8;		// reference smrtdrv/LicenseApplet.fullName
					sconst_0;
					getstatic_s 16;		// short smrtdrv/LicenseApplet.fullNameLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					aload_2;
					sconst_0;
					getstatic_s 18;		// short smrtdrv/LicenseApplet.hometownLen
					s2b;
					bastore;
					aload_1;
					sconst_0;
					sconst_1;
					invokevirtual 42;		// sendBytes(SS)V
					aload_1;
					getstatic_a 10;		// reference smrtdrv/LicenseApplet.hometown
					sconst_0;
					getstatic_s 18;		// short smrtdrv/LicenseApplet.hometownLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					aload_1;
					getstatic_a 9;		// reference smrtdrv/LicenseApplet.birthDate
					sconst_0;
					getstatic_s 17;		// short smrtdrv/LicenseApplet.birthDateLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					aload_1;
					getstatic_a 11;		// reference smrtdrv/LicenseApplet.grantedDate
					sconst_0;
					getstatic_s 19;		// short smrtdrv/LicenseApplet.grantedDateLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					aload_1;
					getstatic_a 12;		// reference smrtdrv/LicenseApplet.expireDate
					sconst_0;
					getstatic_s 20;		// short smrtdrv/LicenseApplet.expireDateLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					aload_2;
					sconst_0;
					getstatic_b 6;		// byte smrtdrv/LicenseApplet.cardType
					bastore;
					aload_1;
					sconst_0;
					sconst_1;
					invokevirtual 42;		// sendBytes(SS)V
					return;
		}

		.method private readRecentFault(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_1;
					invokevirtual 39;		// setOutgoing()S
					pop;
					aload_1;
					getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					arraylength;
					invokevirtual 40;		// setOutgoingLength(S)V
					aload_1;
					getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					sconst_0;
					getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					arraylength;
					invokevirtual 41;		// sendBytesLong([BSS)V
					return;
		}

		.method private readAvatarImage(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_1;
					invokevirtual 39;		// setOutgoing()S
					pop;
					aload_1;
					getstatic_s 43;		// short smrtdrv/LicenseApplet.avatarImageLen
					invokevirtual 40;		// setOutgoingLength(S)V
					aload_1;
					getstatic_a 13;		// reference smrtdrv/LicenseApplet.avatarImage
					sconst_0;
					getstatic_s 43;		// short smrtdrv/LicenseApplet.avatarImageLen
					invokevirtual 41;		// sendBytesLong([BSS)V
					return;
		}

		.method private writeAllBasicInfo(Ljavacard/framework/APDU;)V {
			.stack 0;
			.locals 0;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	invokestatic 44;		// javacard/framework/JCSystem.beginTransaction()V
					invokestatic 45;		// javacard/framework/JCSystem.commitTransaction()V
					return;
		}

		.method private rewriteCardId(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					sconst_5;
					getstatic_a 7;		// reference smrtdrv/LicenseApplet.cardId
					sconst_0;
					bspush 8;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					return;
		}

		.method private rewriteCardType(Ljavacard/framework/APDU;)V {
			.stack 2;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					sconst_2;
					baload;
					putstatic_b 6;		// byte smrtdrv/LicenseApplet.cardType
					return;
		}

		.method private rewriteFullName(Ljavacard/framework/APDU;S)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_3;
				L1:	aload_3;
					sconst_5;
					getstatic_a 8;		// reference smrtdrv/LicenseApplet.fullName
					sconst_0;
					sload_2;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					sload_2;
					putstatic_s 16;		// short smrtdrv/LicenseApplet.fullNameLen
					return;
		}

		.method private rewriteBirthDate(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					sconst_5;
					getstatic_a 9;		// reference smrtdrv/LicenseApplet.birthDate
					sconst_0;
					sconst_4;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					sconst_4;
					putstatic_s 17;		// short smrtdrv/LicenseApplet.birthDateLen
					return;
		}

		.method private rewriteHometown(Ljavacard/framework/APDU;S)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_3;
				L1:	aload_3;
					sconst_5;
					getstatic_a 10;		// reference smrtdrv/LicenseApplet.hometown
					sconst_0;
					sload_2;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					sload_2;
					putstatic_s 18;		// short smrtdrv/LicenseApplet.hometownLen
					return;
		}

		.method private rewriteGrantedDate(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					sconst_5;
					getstatic_a 11;		// reference smrtdrv/LicenseApplet.grantedDate
					sconst_0;
					sconst_4;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					sconst_4;
					putstatic_s 19;		// short smrtdrv/LicenseApplet.grantedDateLen
					return;
		}

		.method private rewriteExpireDate(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					sconst_5;
					getstatic_a 12;		// reference smrtdrv/LicenseApplet.expireDate
					sconst_0;
					sconst_4;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					sconst_4;
					putstatic_s 20;		// short smrtdrv/LicenseApplet.expireDateLen
					return;
		}

		.method private writeNewFault(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					sconst_0;
					getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					sconst_5;
					bspush 20;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload_2;
					sconst_5;
					getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					sconst_0;
					sconst_5;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					return;
		}

		.method private rewriteAvatarImage(Ljavacard/framework/APDU;S)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 22;		// getBuffer()[B
					astore_3;
				L1:	aload_3;
					sconst_5;
					getstatic_a 13;		// reference smrtdrv/LicenseApplet.avatarImage
					sconst_0;
					sload_2;
					invokestatic 14;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					sload_2;
					putstatic_s 43;		// short smrtdrv/LicenseApplet.avatarImageLen
					aload_1;
					invokevirtual 39;		// setOutgoing()S
					pop;
					aload_1;
					getstatic_s 43;		// short smrtdrv/LicenseApplet.avatarImageLen
					invokevirtual 40;		// setOutgoingLength(S)V
					aload_3;
					sconst_0;
					sload_2;
					s2b;
					bastore;
					aload_1;
					sconst_0;
					sconst_1;
					invokevirtual 42;		// sendBytes(SS)V
					return;
		}

		.method private clearRecentFault()V {
			.stack 4;
			.locals 0;

				L0:	getfield_a_this 1;		// reference smrtdrv/LicenseApplet.recentFaults
					sconst_0;
					sspush 8192;
					sconst_0;
					invokestatic 46;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					sconst_0;
					putstatic_s 43;		// short smrtdrv/LicenseApplet.avatarImageLen
					return;
		}

	}

}
